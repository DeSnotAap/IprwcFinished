{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = environment.apiUrl + '/books';\nexport let BookService = /*#__PURE__*/(() => {\n  class BookService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getBooks(page = 0, size = 10, categoryId, searchTerm) {\n      let params = new HttpParams().set('page', page.toString()).set('size', size.toString());\n\n      if (categoryId) {\n        params = params.set('categoryId', categoryId.toString());\n      }\n\n      if (searchTerm) {\n        params = params.set('search', searchTerm);\n      }\n\n      return this.http.get(API_URL, {\n        params\n      }).pipe(timeout(10000), catchError(error => {\n        console.error('Error fetching books:', error);\n        return throwError(() => new Error('Failed to load books. Please try again.'));\n      }));\n    }\n\n    getBook(id) {\n      return this.http.get(`${API_URL}/${id}`).pipe(timeout(10000), catchError(error => {\n        console.error(`Error fetching book ${id}:`, error);\n        return throwError(() => new Error('Failed to load book. Please try again.'));\n      }));\n    }\n\n    createBook(book) {\n      return this.http.post(API_URL, book);\n    }\n\n    updateBook(id, book) {\n      return this.http.put(`${API_URL}/${id}`, book);\n    }\n\n    deleteBook(id) {\n      return this.http.delete(`${API_URL}/${id}`);\n    }\n\n    getFeaturedBooks() {\n      return this.http.get(`${API_URL}/featured`);\n    }\n\n    getBooksByCategory(categoryId) {\n      return this.http.get(`${API_URL}/category/${categoryId}`).pipe(timeout(10000), catchError(error => {\n        console.error(`Error fetching books for category ${categoryId}:`, error);\n        return throwError(() => new Error('Failed to load books for this category. Please try again.'));\n      }));\n    }\n\n    searchBooks(searchTerm) {\n      const params = new HttpParams().set('search', searchTerm);\n      return this.http.get(`${API_URL}/search`, {\n        params\n      });\n    }\n\n  }\n\n  BookService.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n  return BookService;\n})();","map":null,"metadata":{},"sourceType":"module"}