{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = environment.apiUrl + '/categories';\nexport let CategoryService = /*#__PURE__*/(() => {\n  class CategoryService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getCategories() {\n      return this.http.get(API_URL).pipe(timeout(10000), // 10 second timeout\n      catchError(error => {\n        console.error('Error fetching categories:', error);\n        return throwError(() => new Error('Failed to load categories. Please try again.'));\n      }));\n    }\n\n    getCategory(id) {\n      return this.http.get(`${API_URL}/${id}`).pipe(timeout(10000), catchError(error => {\n        console.error(`Error fetching category ${id}:`, error);\n        return throwError(() => new Error('Failed to load category. Please try again.'));\n      }));\n    }\n\n    createCategory(category) {\n      return this.http.post(API_URL, category);\n    }\n\n    updateCategory(id, category) {\n      return this.http.put(`${API_URL}/${id}`, category);\n    }\n\n    deleteCategory(id) {\n      return this.http.delete(`${API_URL}/${id}`);\n    }\n\n  }\n\n  CategoryService.ɵfac = function CategoryService_Factory(t) {\n    return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryService,\n    factory: CategoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return CategoryService;\n})();","map":null,"metadata":{},"sourceType":"module"}