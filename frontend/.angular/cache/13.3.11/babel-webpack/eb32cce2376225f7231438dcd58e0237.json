{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.apiUrl = 'http://localhost:8081/api/cart';\n      this.cartSubject = new BehaviorSubject(null);\n      this.cart$ = this.cartSubject.asObservable();\n      this.cartCountSubject = new BehaviorSubject(0);\n      this.cartCount$ = this.cartCountSubject.asObservable();\n      this.loadCartCount();\n    }\n    /**\r\n     * Check if user is admin - admins don't have cart access\r\n     */\n\n\n    isAdmin() {\n      return this.authService.isAdmin();\n    }\n    /**\r\n     * Get the current user's cart\r\n     */\n\n\n    getCart() {\n      if (this.isAdmin()) {\n        // Return empty cart for admins\n        return of({\n          id: 0,\n          items: [],\n          itemCount: 0,\n          subtotal: 0,\n          total: 0\n        });\n      }\n\n      return this.http.get(this.apiUrl).pipe(tap(cart => this.cartSubject.next(cart)));\n    }\n    /**\r\n     * Add an item to the cart\r\n     */\n\n\n    addToCart(bookId, quantity) {\n      if (this.isAdmin()) {\n        return of({});\n      }\n\n      const request = {\n        bookId,\n        quantity\n      };\n      return this.http.post(`${this.apiUrl}/items`, request).pipe(tap(() => this.loadCartCount()));\n    }\n    /**\r\n     * Update cart item quantity\r\n     */\n\n\n    updateQuantity(itemId, quantity) {\n      if (this.isAdmin()) {\n        return of({});\n      }\n\n      const request = {\n        quantity\n      };\n      return this.http.put(`${this.apiUrl}/items/${itemId}`, request).pipe(tap(() => this.loadCartCount()));\n    }\n    /**\r\n     * Remove an item from the cart\r\n     */\n\n\n    removeItem(itemId) {\n      if (this.isAdmin()) {\n        return of({});\n      }\n\n      return this.http.delete(`${this.apiUrl}/items/${itemId}`).pipe(tap(() => this.loadCartCount()));\n    }\n    /**\r\n     * Get the number of items in the cart\r\n     */\n\n\n    loadCartCount() {\n      if (this.isAdmin()) {\n        this.cartCountSubject.next(0);\n        return;\n      }\n\n      this.http.get(`${this.apiUrl}/count`).subscribe(response => this.cartCountSubject.next(response.count), error => console.error('Error loading cart count:', error));\n    }\n    /**\r\n     * Clear the cart\r\n     */\n\n\n    clearCart() {\n      if (this.isAdmin()) {\n        return of({});\n      }\n\n      return this.http.delete(this.apiUrl).pipe(tap(() => {\n        this.cartCountSubject.next(0);\n        this.cartSubject.next(null);\n      }));\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}