{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst AUTH_API = environment.apiUrl + '/auth/';\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(this.getUserFromStorage());\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(loginRequest) {\n      return this.http.post(AUTH_API + 'login', loginRequest, httpOptions).pipe(tap(response => {\n        this.saveToken(response.token);\n        this.saveUser(response);\n        this.currentUserSubject.next({\n          id: response.id,\n          username: response.username,\n          email: response.email,\n          role: response.role,\n          firstName: response.firstName,\n          lastName: response.lastName,\n          address: response.address\n        });\n      }));\n    }\n\n    register(registerRequest) {\n      return this.http.post(AUTH_API + 'register', registerRequest, httpOptions);\n    }\n\n    logout() {\n      localStorage.removeItem(TOKEN_KEY);\n      localStorage.removeItem(USER_KEY);\n      this.currentUserSubject.next(null);\n    }\n\n    saveToken(token) {\n      localStorage.removeItem(TOKEN_KEY);\n      localStorage.setItem(TOKEN_KEY, token);\n    }\n\n    getToken() {\n      return localStorage.getItem(TOKEN_KEY);\n    }\n\n    saveUser(user) {\n      localStorage.removeItem(USER_KEY);\n      localStorage.setItem(USER_KEY, JSON.stringify(user));\n    }\n\n    getUserFromStorage() {\n      const user = localStorage.getItem(USER_KEY);\n\n      if (user) {\n        return JSON.parse(user);\n      }\n\n      return null;\n    }\n\n    isLoggedIn() {\n      return !!this.getToken();\n    }\n\n    isAdmin() {\n      const user = this.currentUserValue;\n      return user !== null && user.role === 'ADMIN';\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}